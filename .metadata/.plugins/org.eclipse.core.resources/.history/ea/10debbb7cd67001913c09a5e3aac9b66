package poi;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.junit.Test;

public class Mytest {
	 @Test
	    public void contextLoads() {
	 
	    // 导出的excel,全文件名
	    final String excelExportDestfilepath = "C:/Users/zy/Desktop/abc.xlsx";
	 
	        FileOutputStream fos = null;
	        SXSSFWorkbook sxssfWorkbook = null;
	        try {	 
	            /// -> excel到处逻辑
	            long startTime = System.currentTimeMillis();
	            // 获取SXSSFWorkbook实例
	            sxssfWorkbook = new SXSSFWorkbook();
	            Sheet sheet = sxssfWorkbook.createSheet("我是Sheet");
	            // 冻结最左边的两列、冻结最上面的一行
	            // 即：滚动横向滚动条时，左边的第一、二列固定不动;滚动纵向滚动条时，上面的第一行固定不动。
	            sheet.createFreezePane(2, 1);
	            // 设置并获取到需要的样式
	            XSSFCellStyle xssfCellStyleHeader = getAndSetXSSFCellStyleHeader(sxssfWorkbook);
	            XSSFCellStyle xssfCellStyleOne = getAndSetXSSFCellStyleOne(sxssfWorkbook);
	            XSSFCellStyle xssfCellStyleTwo = getAndSetXSSFCellStyleTwo(sxssfWorkbook);
	            // 创建第一行,作为header表头
	            Row header = sheet.createRow(0);
	            // 循环创建header单元格(根据实际情况灵活创建即可)
	            for (int cellnum = 0; cellnum < 11; cellnum++) {
	                Cell cell = header.createCell(cellnum);
	                cell.setCellStyle(xssfCellStyleHeader);
	                // 判断单元格
	                if (cellnum == 0) {
	                    cell.setCellValue("通话ID");
	                } else if (cellnum == 1) {
	                    cell.setCellValue("绑定关系ID");
	                } else if (cellnum == 2) {
	                    cell.setCellValue("主叫号码");
	                } else if (cellnum == 3) {
	                    cell.setCellValue("被叫号码");
	                } else if (cellnum == 4) {
	                    cell.setCellValue("中间号码");
	                } else if (cellnum == 5) {
	                    cell.setCellValue("通话发生时间");
	                } else if (cellnum == 6) {
	                    cell.setCellValue("通话开始时间");
	                } else if (cellnum == 7) {
	                    cell.setCellValue("通话结束时间");
	                } else if (cellnum == 8) {
	                    cell.setCellValue("通话时长(秒)");
	                } else if (cellnum == 9) {
	                    cell.setCellValue("结束发起方");
	                } else {
	                    cell.setCellValue("结束状态（即挂断原因）");
	                }
	            }
	 
	            // 遍历创建行,导出数据
	            for (int rownum = 1; rownum <= list.size(); rownum++) {
	                Row row = sheet.createRow(rownum);
	                // 循环创建单元格
	                for (int cellnum = 0; cellnum < 11; cellnum++) {
	                    Cell cell = row.createCell(cellnum);
	                    // 根据行数,设置该行内的单元格样式
	                    if (rownum % 2 == 1) { // 奇数
	                        cell.setCellStyle(xssfCellStyleOne);
	                    } else { // 偶数
	                        cell.setCellStyle(xssfCellStyleTwo);
	                    }
	                    // 根据单元格所属,录入相应内容
	                    // 将部分数字类型的字符串,转换为Long;以免导出excel后,单元格左上角有三
	                    //    角形(这是excel检查到该单元格内的内容均为数字,但是单元格类型却不是
	                    //    数字,给出的提示),转不转看自己需求灵活处理
	                    if (cellnum == 0) {
	                        cell.setCellValue((list.get(rownum - 1).getCallId()));
	                    } else if (cellnum == 1) {
	                        cell.setCellValue(list.get(rownum - 1).getBindId());
	                    } else if (cellnum == 2) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getCallNo()));
	                    } else if (cellnum == 3) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getPeerNo()));
	                    } else if (cellnum == 4) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getTelX()));
	                    } else if (cellnum == 5) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getCallTime()));
	                    } else if (cellnum == 6) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getStartTime()));
	                    } else if (cellnum == 7) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getFinishTime()));
	                    } else if (cellnum == 8) {
	                        cell.setCellValue(list.get(rownum - 1).getCallDuration());
	                    } else if (cellnum == 9) {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getFinishType()));
	                    } else {
	                        cell.setCellType(Cell.CELL_TYPE_NUMERIC);
	                        cell.setCellValue(Long.parseLong(list.get(rownum - 1).getFinishState()));
	 
	                    }
	                }
	            }
	            // 在后面设置sheet
	            setSheet(sheet);
	            fos = new FileOutputStream(excelExportDestfilepath);
	            sxssfWorkbook.write(fos);
	            long endTime = System.currentTimeMillis();
	            logger.info("数据全部导出至excel总耗时:{} 毫秒!", endTime - startTime, list.size());
	        } catch (Exception e) {
	            logger.error("发生异常咯！", e);
	        } finally {
	            try {
	                if(sxssfWorkbook != null) {
	                    // dispose of temporary files backing this workbook on disk -> 处
	                    //     理SXSSFWorkbook导出excel时，产生的临时文件
	                    sxssfWorkbook.dispose();
	                }
	                if(fos != null) {
	                    fos.close();
	                }
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	 
	        }
	    }
}
